kind: golang.Generate
spec:
  versionPackagePath: internal/version
---
kind: golang.Build
spec:
  outputs:
    linux-amd64:
      GOOS: linux
      GOARCH: amd64
    linux-arm64:
      GOOS: linux
      GOARCH: arm64
---
kind: golang.Toolchain
spec:
  makefile:
    extraVariables:
      - name: PKGS_PREFIX
        defaultValue: ghcr.io/siderolabs
      - name: PKGS
        defaultValue: v1.10.0-alpha.0-49-g347ad26
  docker:
    extraArgs:
      - PKGS_PREFIX
      - PKGS
---
kind: common.Docker
spec:
  extraBuildArgs:
    - PKGS_PREFIX
    - PKGS
---
kind: common.Image
name: image-image-factory
spec:
  extraEnvironment:
    PLATFORM: linux/amd64,linux/arm64
  additionalImages: [] # so we copy same fhs and ca-certificates as the version of other tools
  allowedLocalPaths:
    - tailwind.config.js
    - package.json
    - package-lock.json
  dependsOn:
    - tailwind
  entrypoint: /usr/bin/image-factory
  copyFrom:
    - name: pkg-fhs
      stage: ${PKGS_PREFIX}/fhs:${PKGS}
      source: /
      destination: /
    - name: pkg-ca-certificates
      stage: ${PKGS_PREFIX}/ca-certificates:${PKGS}
      source: /
      destination: /
    - name: pkg-musl
      stage: ${PKGS_PREFIX}/musl:${PKGS}
      source: /
      destination: /
    - name: pkg-cpio
      stage: ${PKGS_PREFIX}/cpio:${PKGS}
      source: /
      destination: /
    - name: pkg-dosfstools
      stage: ${PKGS_PREFIX}/dosfstools:${PKGS}
      source: /
      destination: /
    - name: pkg-grub
      stage: ${PKGS_PREFIX}/grub:${PKGS}
      source: /
      destination: /
    - name: pkg-grub-amd64
      stage: ${PKGS_PREFIX}/grub:${PKGS}
      platform: linux/amd64
      source: /usr/lib/grub
      destination: /usr/lib/grub
    - name: pkg-grub-arm64
      stage: ${PKGS_PREFIX}/grub:${PKGS}
      platform: linux/arm64
      source: /usr/lib/grub
      destination: /usr/lib/grub
    - name: pkg-grub-unicode
      stage: ghcr.io/siderolabs/installer:v1.9.4
      source: /usr/share/grub/unicode.pf2
      destination: /usr/share/grub/unicode.pf2
    - name: pkg-kmod
      stage: ${PKGS_PREFIX}/kmod:${PKGS}
      source: /
      destination: /
    - name: pkg-libattr
      stage: ${PKGS_PREFIX}/libattr:${PKGS}
      source: /
      destination: /
    - name: pkg-lininih
      stage: ${PKGS_PREFIX}/libinih:${PKGS}
      source: /
      destination: /
    - name: pkg-liblzma
      stage: ${PKGS_PREFIX}/liblzma:${PKGS}
      source: /
      destination: /
    - name: pkg-linurcu
      stage: ${PKGS_PREFIX}/liburcu:${PKGS}
      source: /
      destination: /
    - name: pkg-openssl
      stage: ${PKGS_PREFIX}/openssl:${PKGS}
      source: /
      destination: /
    - name: pkg-xfsprogs
      stage: ${PKGS_PREFIX}/xfsprogs:${PKGS}
      source: /
      destination: /
    - name: pkg-e2fsprogs
      stage: ${PKGS_PREFIX}/e2fsprogs:${PKGS}
      source: /
      destination: /
    - name: pkg-glib
      stage: ${PKGS_PREFIX}/glib:${PKGS}
      source: /
      destination: /
    - name: pkg-linburn
      stage: ${PKGS_PREFIX}/libburn:${PKGS}
      source: /
      destination: /
    - name: pkg-libisoburn
      stage: ${PKGS_PREFIX}/libisoburn:${PKGS}
      source: /
      destination: /
    - name: pkg-linisofs
      stage: ${PKGS_PREFIX}/libisofs:${PKGS}
      source: /
      destination: /
    - name: pkg-mtools
      stage: ${PKGS_PREFIX}/mtools:${PKGS}
      source: /
      destination: /
    - name: pkg-pcre2
      stage: ${PKGS_PREFIX}/pcre2:${PKGS}
      source: /
      destination: /
    - name: pkg-pigz
      stage: ${PKGS_PREFIX}/pigz:${PKGS}
      source: /
      destination: /
    - name: pkg-qemu-tools
      stage: ${PKGS_PREFIX}/qemu-tools:${PKGS}
      source: /
      destination: /
    - name: pkg-squashfs-tools
      stage: ${PKGS_PREFIX}/squashfs-tools:${PKGS}
      source: /
      destination: /
    - name: pkg-tar
      stage: ${PKGS_PREFIX}/tar:${PKGS}
      source: /
      destination: /
    - name: pkg-xz
      stage: ${PKGS_PREFIX}/xz:${PKGS}
      source: /
      destination: /
    - name: pkg-zlib
      stage: ${PKGS_PREFIX}/zlib:${PKGS}
      source: /
      destination: /
    - name: pkg-zstd
      stage: ${PKGS_PREFIX}/zstd:${PKGS}
      source: /
      destination: /
---
kind: auto.CustomSteps
spec:
  steps:
    - name: integration.test
      toplevel: true
    - name: integration
      toplevel: true
    - name: tailwind
      toplevel: true
---
kind: custom.Step
name: integration.test
spec:
  docker:
    enabled: true
    stages:
      - name: integration-build
        description: builds the integration test binary
        from: base
        steps:
          - script:
              command: go test -c -covermode=atomic -coverpkg=./... -tags integration ./internal/integration
              cache:
                - /root/.cache/go-build
                - /go/pkg
      - name: integration.test
        description: copies out the integration test binary
        steps:
          - copy:
              from: integration-build
              src: /src/integration.test
              dst: /integration.test
  makefile:
    enabled: true
    phony: true
    script:
      - "@$(MAKE) local-$@ DEST=$(ARTIFACTS)"
---
kind: custom.Step
name: integration
spec:
  makefile:
    enabled: true
    phony: true
    depends:
      - integration.test
    variables:
      - name: RUN_TESTS
        defaultValue: TestIntegration
      - name: TEST_FLAGS
        defaultValue: ""
    script:
      - "@$(MAKE) image-image-factory PUSH=true"
      - docker pull $(REGISTRY)/$(USERNAME)/image-factory:$(TAG)
      - docker run --rm --net=host --privileged -v /dev:/dev -v $(PWD)/$(ARTIFACTS)/integration.test:/bin/integration.test:ro --entrypoint /bin/integration.test $(REGISTRY)/$(USERNAME)/image-factory:$(TAG) -test.v $(TEST_FLAGS) -test.run $(RUN_TESTS)
  ghaction:
    enabled: true
    environment:
      REGISTRY: registry.dev.siderolabs.io
      TEST_FLAGS: "-test.schematic-service-repository=registry.dev.siderolabs.io/image-factory/schematic -test.installer-external-repository=registry.dev.siderolabs.io/siderolabs -test.installer-internal-repository=registry.dev.siderolabs.io/siderolabs -test.cache-repository=registry.dev.siderolabs.io/image-factory/cache"
---
kind: common.Build
spec:
  ignoredPaths:
    - node_modules/
---
kind: service.CodeCov
spec:
  targetThreshold: 9 # the actual coverage is much higher and reported from the integration test
---
kind: custom.Step
name: tailwind
spec:
  makefile:
    enabled: true
    phony: true
    script:
      - "@$(MAKE) local-tailwind-copy PUSH=false DEST=. BUILDKIT_MULTI_PLATFORM=0"
  docker:
    description: "Runs tailwind update"
    enabled: true
    stages:
      - name: tailwind-base
        description: "Installs tailwindcss"
        from: docker.io/node:21.7.3-alpine3.19
        workdir: /src
        steps:
          - copy:
              src: package.json package-lock.json
              dst: .
          - script:
              cache:
                - /src/node_modules
              command: npm ci
      - name: tailwind-update
        description: "tailwind update"
        from: tailwind-base
        steps:
          - copy:
              src: tailwind.config.js
              dst: .
          - copy:
              src: internal/frontend/http
              dst: internal/frontend/http
          - script:
              cache:
                - /src/node_modules
              command: node_modules/.bin/tailwindcss -i internal/frontend/http/css/input.css -o internal/frontend/http/css/output.css --minify
      - name: tailwind-copy
        description: "Copies assets"
        steps:
          - copy:
              from: tailwind-update
              src: /src/internal/frontend/http/css/output.css
              dst: internal/frontend/http/css/output.css
